package main

import "fmt"

/*
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释:
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的原地算法。
 */
func rotate(nums []int, k int)  {
	length := len(nums)
	k = k % length

	// 若直接赋值给原数组，可能会因为切片容量不够，导致内存重新分配地址
	// go语言里两个引用传递的数据类型 1. 切片； 2. map
	// ...表示切片展开
	a := append(nums[length - k:], nums[: length - k]...)


	for i,d := range a {
		nums[i] = d
	}
}

func main()  {

	nums := []int{1,2,3,4,5,6,7}
	rotate(nums, 3)

	for i := range nums {
		fmt.Print(nums[i])
	}
}
